
// This is a placeholder .ino file that allows you to easily edit the contents of this library using the Arduino IDE,
// as well as compile and test from this point.  This file is ignored when the library is included in other sketches.

#include "PwmPin.h"
#include <soc/ledc_reg.h> 
#include "esp_rom_gpio.h"

void setup(){
 
  Serial.begin(115200);
  delay(1000);

  Serial.print("\n\nTest sketch for HomeSpan Extras Library\n\n");

  Serial.println("Starting...");

  LedPin *led[20];

//  int p[]={33,27,4,32,18,19,16,17,5};
    int p[]={11,7,3,1,38,33,9};

  for(int i=0;i<sizeof(p)/4;i++)
    led[i]=new LedPin(p[i],20,5000+i);    

  new LedPin(10,200,65535);
  new LedPin(5,200,65535);
  
//Serial.printf("HSTIMER0: %d %d %d %d\n",
//  REG_GET_FIELD(LEDC_HSTIMER0_CONF_REG,LEDC_TICK_SEL_HSTIMER0),
//  REG_GET_FIELD(LEDC_HSTIMER0_CONF_REG,LEDC_DIV_NUM_HSTIMER0)>>8,
//  REG_GET_FIELD(LEDC_HSTIMER0_CONF_REG,LEDC_DIV_NUM_HSTIMER0)&0xFF,
//  REG_GET_FIELD(LEDC_HSTIMER0_CONF_REG,LEDC_HSTIMER0_DUTY_RES)
//  );
//
//Serial.printf("HSCHAN0: %d %d %d %d %d\n",
//  REG_READ(LEDC_HSCH0_CONF0_REG),
//  REG_READ(LEDC_HSCH0_HPOINT_REG),
//  REG_READ(LEDC_HSCH0_DUTY_REG)>>4,
//  REG_READ(LEDC_HSCH0_DUTY_REG)&0xF,
//  REG_GET_FIELD(LEDC_HSCH0_CONF1_REG,LEDC_DUTY_INC_HSCH0)
//  );
//
//Serial.printf("LSTIMER0: %d %d %d %d\n",
//  REG_GET_FIELD(LEDC_LSTIMER0_CONF_REG,LEDC_TICK_SEL_LSTIMER0),
//  REG_GET_FIELD(LEDC_LSTIMER0_CONF_REG,LEDC_DIV_NUM_LSTIMER0)>>8, 
//  REG_GET_FIELD(LEDC_LSTIMER0_CONF_REG,LEDC_DIV_NUM_LSTIMER0)&0xFF,
//  REG_GET_FIELD(LEDC_LSTIMER0_CONF_REG,LEDC_LSTIMER0_DUTY_RES)
//  );
//
//delay(100);
//  
//Serial.printf("LSCHAN0: %d %d %d %d %d\n",
//  REG_READ(LEDC_LSCH0_CONF0_REG),
//  REG_READ(LEDC_LSCH0_HPOINT_REG),
//  REG_READ(LEDC_LSCH0_DUTY_REG)>>4,
//  REG_READ(LEDC_LSCH0_DUTY_REG)&0xF,
//  REG_GET_FIELD(LEDC_LSCH0_CONF1_REG,LEDC_DUTY_INC_LSCH0)
//  );
//
//Serial.printf("LOW CLOCK: %d\n",REG_READ(LEDC_CONF_REG));  
//
//Serial.printf("GPIO 32: %d %d %d %d\n",
//  REG_GET_FIELD(GPIO_FUNC32_OUT_SEL_CFG_REG,GPIO_FUNC32_OEN_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC32_OUT_SEL_CFG_REG,GPIO_FUNC32_OEN_SEL),
//  REG_GET_FIELD(GPIO_FUNC32_OUT_SEL_CFG_REG,GPIO_FUNC32_OUT_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC32_OUT_SEL_CFG_REG,GPIO_FUNC32_OUT_SEL)
//  );
//  
//Serial.printf("GPIO 5: %d %d %d %d\n",
//  REG_GET_FIELD(GPIO_FUNC5_OUT_SEL_CFG_REG,GPIO_FUNC5_OEN_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC5_OUT_SEL_CFG_REG,GPIO_FUNC5_OEN_SEL),
//  REG_GET_FIELD(GPIO_FUNC5_OUT_SEL_CFG_REG,GPIO_FUNC5_OUT_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC5_OUT_SEL_CFG_REG,GPIO_FUNC5_OUT_SEL)
//  );
//
//Serial.printf("GPIO 4: %d %d %d %d\n",
//  REG_GET_FIELD(GPIO_FUNC4_OUT_SEL_CFG_REG,GPIO_FUNC4_OEN_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC4_OUT_SEL_CFG_REG,GPIO_FUNC4_OEN_SEL),
//  REG_GET_FIELD(GPIO_FUNC4_OUT_SEL_CFG_REG,GPIO_FUNC4_OUT_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC4_OUT_SEL_CFG_REG,GPIO_FUNC4_OUT_SEL)
//  );  
//
//Serial.printf("GPIO 33: %d %d %d %d\n",
//  REG_GET_FIELD(GPIO_FUNC33_OUT_SEL_CFG_REG,GPIO_FUNC33_OEN_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC33_OUT_SEL_CFG_REG,GPIO_FUNC33_OEN_SEL),
//  REG_GET_FIELD(GPIO_FUNC33_OUT_SEL_CFG_REG,GPIO_FUNC33_OUT_INV_SEL),
//  REG_GET_FIELD(GPIO_FUNC33_OUT_SEL_CFG_REG,GPIO_FUNC33_OUT_SEL)
//  );  

  while(1);
}

void loop(){
}
